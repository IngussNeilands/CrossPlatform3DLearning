-----------------------------------------
Avoid the Bug 3D - Developer Instructions

Created on: Aug 10, 2013

    Author: Dimitri Kourkoulis
            http://dimitros.be
-----------------------------------------

* Environment Setup (Fedora)
----------------------------

sudo yum install make automake gcc gcc-c++
sudo yum install binutils
sudo yum install cmake
sudo yum install glew-devel
sudo yum install SDL SDL-devel SDL-static
sudo yum install SDL_ttf-devel
sudo yum install boost-devel boost-test
sudo yum install doxygen
sudo yum install valgrind
sudo yum install glm-devel
sudo yum install libpng-devel
sudo yum install gdb

* Environment setup (Ubuntu / Debian)
----------------------------
[ *** The program does not currently compile on Debian because the linker
cannot link against the SDL_ttf library, even though cmake finds it. Hopefully
this will be corrected soon, after an SDL_ttf or cmake update for Debian has
been released, or after I find a workaround. *** ]
sudo apt-get update
sudo apt-get install build-essential
sudo apt-get install binutils-gold
sudo apt-get install cmake
sudo apt-get install libglew-dev
 if the GLEW library available for your system is <1.10.0 you will need to manually
 install the latest version. On my Ubuntu 10.2 LTS I only had libglew 1.6.0
 You can download the source from here: http://glew.sourceforge.net/
 Then you need to run make and make install from the uncompressed folder.
 You might also need to add these packages, in order to be able to compile it:
 sudo apt-get install libxmu-dev
 sudo apt-get install libxi-dev
(cmake might not contain the FindGLEW.cmake module which is needed for it
 to find this library. In that case, you can download it from here and put
 it in cmake's modules directory:
 http://code.google.com/p/nvidia-texture-tools/source/browse/trunk/cmake/FindGLEW.cmake)
sudo apt-get install libsdl1.2-dev
sudo apt-get install libsdl1.2-dbg
sudo apt-get install libboost-dev
sudo apt-get install libboost-test-dev
  (The above works in Debian. In Ubuntu I had to do the following:
  sudo apt-get install libboost-test1.46.1
  sudo ln -s /usr/lib/libboost_unit_test_framework.so.1.46.1 
  /usr/lib/libboost_unit_test_framework.so (The exact
  versioned name may differ, depending on the version of the Boost library and 
  the versioned file's path may differ depending on the Linux distribution. The point 
  is that the libboost_unit_test_framework library needs to be named according to 
  how CMake expects to find it and placed in the proper directory. If that is not the
  case, a symbolic link can be made to correct the problem.)
sudo apt-get install libboost-filesystem-dev
sudo apt-get install libboost-filesystem1.46.1 (Only needed this in Ubuntu LTS)
sudo apt-get install libpng12-dev
sudo apt-get install doxygen
sudo apt-get install valgrind
sudo apt-get install libglm-dev

* Environment setup (Windows)
-----------------------------

Download and install cmake (http://www.cmake.org/). I am using version 2.8.
Create a folder where all the libraries and include files found by cmake
will be placed, e.g. C:\cmakerefs
Download SDL (http://www.libsdl.org - VC development libraries) and unzip it to
a folder within C:\cmakerefs. I am using version 1.2.
In the lib subdirectory of SDL, copy the contents of the 32 bit subdirectory one 
level up.
Download the SDL_ttf development package for Visual Studio
(https://www.libsdl.org/projects/SDL_ttf/release-1.2.html). Unfortunately I
could not get cmake to find this package just by copying it to cmakerefs.
Maybe there is a way, but what worked for me, was to copy the files from the
\include directory to the \include directory of the basic SDL package, and the
files from the \lib\x86 directory to the \lib directory of SDL.
Download GLEW for windows (http://glew.sourceforge.net/) and unzip it to a 
folder within C:\cmakerefs. Then copy the library files from the
lib\Release\Win32 directory of the unzipped archive to the lib
directory.
Download the Boost libraries (http://www.boost.org/) and unzip them in a folder.  
I am using version 1.55.  (In Ubuntu I am using an earlier version because it 
was the latest available for my package manager)
Create a folder within C:\cmakerefs to install the built version of the libraries 
of Boost, e.g. C:\cmakerefs\boost_1_55_0
From the source Boost folder, execute bootstrap.bat
	b2 install --prefix=C:\cmakerefs\boost_1_55_0 address-model=32 
--build-type=complete --with-date_time --with-test --with-filesystem 
--with-system
Download GLM (http://glm.g-truc.net) and unzip it to a folder within
C:\cmakerefs.
CMake will also need the FingGLM module, in order to find GLM. If the module
is not contained in your CMake distribution, you can copy it from the above 
mentioned GLM archive, from the folder glm\util, to the modules directory
of CMake.
The project is also using the libpng library, which in turn requires the
zlib library. Normally, a straightforward way to configure them would be the
following:
Download the libpng binaries and developer files for Windows. Links for the
packages can be found here:
http://gnuwin32.sourceforge.net/packages/libpng.htm
Then decompress the archives in a folder in C:\cmakerefs
Download the zlib binaries and developer files for Windows. Links for the
packages can be found here:
http://gnuwin32.sourceforge.net/packages/zlib.htm
Then decompress the archives in a folder in C:\cmakerefs.

On my system, after performing the above and building the program as described
below, I kept getting an access violation whenever I ran the unit tests since I
started using the library. The reason was that libpng binary was not compiled in
the same way as the rest of the project and so I ended up compiling the library 
from source code myself. More details on this issue and how to resolve it can be
found here:

http://signbit01.wordpress.com/2012/05/27/libpng-1-5-10-access-violation-on-visual-studio-2010/

Set an environment variable called CMAKE_PREFIX_PATH to point to the
list of decompressed root directories of all libraries mentioned above, 
for example "C:\libraries\zlib-1.2.3-lib;C:\libraries\libpng-1.2.37-lib ...
etc" (list the developer file directories, the binaries directories which
contain the dlls are not needed by cmake.

Download and install Doxygen (http://www.stack.nl/~dimitri/doxygen/)

* Compiling and running (all systems)
--------------------------------------

Create a directory, called "Temp" in the root folder of the project. Then go to 
that directory and execute the following (you might need to use backslashes in 
Windows, depending on your shell):
    cmake ../Source
Then, in Linux, you just need to run make and you will have the executable ready 
to run. In Windows, a Visual Studio project will be created, which you can open 
with Visual Studio 2010, compile and execute. If the linker reports that it 
cannot find a library from Boost or GLEW, you need to right click on the 
project, select Properties, and go to Configuration Properties > Linker > Input 
and edit the Additional Dependencies.
Locate the library that cannot be found and, if it does not start by "lib", add 
that prefix to it.
Also, right click on the unittest project and go to "Properties > Configuration
Properties > C/C++ > Code Generation". Set "Enable C++ Exceptions" to "Yes with
SEH Exceptions /EHa".
In Windows you will probably need to copy the dlls of the libraries we are using 
(glew32.dll, libfreetype-6.dll, libpng16.dll, SDL.dll, SDL_ttf.dll and
zib1.dll - all 32-bit versions) to the output directory (Release or Debug), unless they 
are already accessible in your system (e.g.  if they have been installed to the 
System directory or if their directories have been included in the PATH 
environment variable.) You will also need to add /NODEFAULTLIB:MSVCRT to each
project's linker additional options (project properties > Linker > Command Line >
Additional Options). Otherwise you will see warnings like the following one when
linking:
warning LNK4098: defaultlib 'msvcrt.lib' conflicts with use of other libs; use 
/NODEFAULTLIB:library
If, while compiling in Windows you receive an error that looks like the following:
"c:\libraries\zlib-1.2.3-lib\include\zconf.h(289): fatal error C1083: Cannot open 
include file: 'unistd.h': No such file or directory",
just comment out the unistd.h include statement in zconf.h. I do not know what
repercussions this can potentially have, but it seems to work for me.
To create an Eclipse project in Linux, run the following command from the Temp 
directory, mentioned above:
cmake -G "Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug 
-DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8 ../Source/
In order to create a Code::Blocks project, run the following command from the
Temp directory, mentioned above:
cmake ../Source -G "CodeBlocks - Unix Makefiles"
If you are using debian, you might need to add a FindGLEW module to your
cmake installation. I have found one that works here:
  https://gitorious.org/imageutilities/imageutilities/source/
  6fbf56db6e851d50faa1f36bc8f11af5664b6d1d:cmake/FindGLEW.cmake
You will have to set the working directory from Build Configurations to where 
Temp and Temp/UnitTesting for the program and the unit tests respectively.  
Otherwise some files (like model files) will not be found during execution.


* Simple compilation of sample OpenGL program (Ubuntu)
------------------------------------------------------

gcc -lglut -lGL -lGLEW -lGLU main.cpp -o OpenGLExample
(I have just put this here to always remember what compiling looked like before
cmake :) )


* Compiling the documentation (all systems)
--------------------------------------------

Go to the Source directory
Execute:
  doxygen doxygen.cfg
The documentation will be created and placed in the Docs/SourceCodeDoc/html 
directory
