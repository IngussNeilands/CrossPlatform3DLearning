-----------------------------------------
Avoid the Bug 3D - Developer Instructions

Created on: Aug 10, 2013

    Author: Dimitri Kourkoulis
            http://dimitros.be
-----------------------------------------


* Environment setup (Ubuntu / Debian)
----------------------------

sudo apt-get update
sudo apt-get install build-essential
sudo apt-get install binutils-gold
sudo apt-get install cmake
sudo apt-get install libglew-dev
 if the GLEW library available for your system is <1.10.0 you will need to manually
 install the latest version. On my Ubuntu 10.2 LTS I only had libglew 1.6.0
 You can download the source from here: http://glew.sourceforge.net/
 Then you need to run make and make install from the uncompressed folder.
 You might also need to add these packages, in order to be able to compile it:
 sudo apt-get install libxmu-dev
 sudo apt-get install libxi-dev
(cmake might not contain the FindGLEW.cmake module which is needed for it
 to find this library. In that case, you can download it from here and put
 it in cmake's modules directory:
 http://code.google.com/p/nvidia-texture-tools/source/browse/trunk/cmake/FindGLEW.cmake)
sudo apt-get install libsdl1.2-dev
sudo apt-get install libsdl1.2-dbg
sudo apt-get install libboost-dev
sudo apt-get install libboost-test-dev
  (The above works in Debian. In Ubuntu I had to do the following:
  sudo apt-get install libboost-test1.46.1
  sudo ln -s /usr/lib/libboost_unit_test_framework.so.1.46.1 
  /usr/lib/libboost_unit_test_framework.so (The exact
  versioned name may differ, depending on the version of the Boost library and 
  the versioned file's path may differ depending on the Linux distribution. The point 
  is that the libboost_unit_test_framework library needs to be named according to 
  how CMake expects to find it and placed in the proper directory. If that is not the
  case, a symbolic link can be made to correct the problem.)
sudo apt-get install libboost-filesystem-dev
sudo apt-get install libboost-filesystem1.46.1 (Only needed this in Ubuntu LTS)
sudo apt-get install doxygen
sudo apt-get install valgrind
sudo apt-get install libglm-dev

* Environment setup (Windows)
-----------------------------

Download and install cmake (http://www.cmake.org/). I am using version 2.8.
Download SDL and unzip it to a folder (http://www.libsdl.org/). I am using 
version 1.2.
Create an SDLDIR environment variable and set it to that folder.
In the lib subdirectory of SDL, copy the contents of the 32 bit subdirectory one 
level up.
Download GLEW for windows (http://glew.sourceforge.net/) and unzip it to a 
folder.
Create GLEW_ROOT_DIR environment variable and set it to that folder.
Download and install Doxygen (http://www.stack.nl/~dimitri/doxygen/)
Download the Boost libraries (http://www.boost.org/) and unzip them in a folder.  
I am using version 1.54.  (In Ubuntu I am using an earlier version because it 
was the latest available for my package manager)
Create a folder to install the built version of the libraries of Boost, e.g.  
C:\boost_1_54_0_installed
From the source Boost folder, execute bootstrap.bat
	b2 install --prefix=C:\boost_1_54_0_installed address-model=32 
--build-type=complete --with-date_time --with-test --with-filesystem 
--with-system
Set environment variable BOOST_ROOT to C:\boost_1_54_0_installed\
Set environment variable BOOST_LIBRARYDIR to C:\boost_1_54_0_installed\lib\
Download GLM (http://glm.g-truc.net) and unzip it to a folder.
Set the environment variable GLM_ROOT_DIR to that folder, so that CMake can
find it.
CMake will also need the FingGLM module, in order to find GLM. If the module
is not contained in your CMake distribution, you can copy it from the above 
mentioned GLM archive, from the folder glm\util, to the modules directory
of CMake.


* Compiling and running (both systems)
--------------------------------------

Create a directory, called "Temp" in the root folder of the project. Then go to 
that directory and execute the following (you might need to use backslashes in 
Windows, depending on your shell):
    cmake ../Source
Then, in Linux, you just need to run make and you will have the executable ready 
to run. In Windows, a Visual Studio project will be created, which you can open 
with Visual Studio 2010, compile and execute. If the linker reports that it 
cannot find a library from Boost or GLEW, you need to right click on the 
project, select Properties, and go to Configuration Properties > Linker > Input 
and edit the Additional Dependencies.
Locate the library that cannot be found and, if it does not start by "lib", add 
that prefix to it.
In Windows you will probably need to copy the dlls of the libraries we are using 
(SDL, Boost, GLEW etc) to the output directory (Release or Debug), unless they 
are already accessible in your system (e.g.  if they have been installed to the 
System directory or if their directories have been included in the PATH 
environment variable.) You will also need to add /NODEFAULTLIB:MSVCRT to each
project's linker additional options (project properties > Linker > Command Line >
Additional Options). Otherwise you will see warnings like the following one when
linking:
warning LNK4098: defaultlib 'msvcrt.lib' conflicts with use of other libs; use 
/NODEFAULTLIB:library
To create an Eclipse project in Linux, run the following command from the Temp 
directory, mentioned above:
cmake -G "Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug 
-DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8 ../Source/
If you are using debian, you might need to add a FindGLEW module to your
cmake installation. I have found one that works here:
  https://gitorious.org/imageutilities/imageutilities/source/
  6fbf56db6e851d50faa1f36bc8f11af5664b6d1d:cmake/FindGLEW.cmake
You will have to set the working directory from Build Configurations to where 
Temp and Temp/UnitTesting for the program and the unit tests respectively.  
Otherwise some files (like model files) will not be found during execution.


* Simple compilation of sample OpenGL program (Ubuntu)
------------------------------------------------------

gcc -lglut -lGL -lGLEW -lGLU main.cpp -o OpenGLExample
(I have just put this here to always remember what compiling looked like before
cmake :) )


* Compiling the documentation (both systems)
--------------------------------------------

Go to the Source/Game directory
Execute:
  doxygen doxygen.cfg
The documentation will be created and placed in the Docs/SourceCodeDoc/html 
directory
