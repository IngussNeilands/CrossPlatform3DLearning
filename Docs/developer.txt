-------------------------------------------------------
Cross Platform 3D Learning

by Dimitrios Kourkoulis

Developer Instructions
-------------------------------------------------------

* Environment setup (Ubuntu):

sudo apt-get update
sudo apt-get install freeglut3
sudo apt-get install freeglut3-dev
sudo apt-get install binutils-gold
sudo apt-get install g++ cmake
sudo apt-get install libglew-dev
(cmake might not contain the FindGLEW.cmake module which is needed for it
 to find this library. In that case, you can download it from here and put
 it in cmake's modules directory:
 http://code.google.com/p/nvidia-texture-tools/source/browse/trunk/cmake/FindGLEW.cmake)
sudo apt-get install mesa-common-dev
sudo apt-get install build-essential
sudo apt-get install libsdl1.2-dev
sudo apt-get install libsdl1.2-dbg
sudo apt-get install libboost-dev
sudo apt-get install libboost-test1.46.1
sudo ln -s /usr/lib/libboost_unit_test_framework.so.1.46.1 /usr/lib/libboost_unit_test_framework.so (The exact
  versioned name may differ, depending on the version of the Boost library and the versioned file's path may
  differ depending on the Linux distribution. The point is that the libboost_unit_test_framework library needs
  to be named according to how CMake expects to find it and placed in the proper directory. If that is not the
  case, a symbolic link can be made to correct the problem.)
sudo apt-get install doxygen
sudo apt-get install valgrind

* Environment setup (Windows):

Download and install cmake (http://www.cmake.org/). I am using version 2.8.
Download SDL and unzip it to a folder (http://www.libsdl.org/). I am using version 1.2.
Create an SDLDIR environment variable and set it to that folder
In the lib subdirectory of SDL, copy the contents of the 32 bit subdirectory one level up
Download GLEW for windows (http://glew.sourceforge.net/) and unzip it to a folder.
Create GLEW_ROOT_DIR environment variable and set it to that folder.
Download and install Doxygen (http://www.stack.nl/~dimitri/doxygen/)
Download the Boost libraries (http://www.boost.org/) and unzip them in a folder. I am using version 1.54. 
(In Ubuntu I am using an earlier version because it was the latest available for my package manager)
Create a folder to install the built version of the libraries of Boost, e.g. C:\boost_1_54_0_installed
From the source Boost folder, execute 
	bootstrap.bat
        b2 install --prefix=C:\boost_1_54_0_installed address-model=32 --build-type=complete --with-date_time --with-test
Set environment variable BOOST_ROOT to C:\boost_1_54_0_installed\
Set environment variable BOOST_LIBRARYDIR to C:\boost_1_54_0_installed\lib\

* Compiling and running (both systems)

Create a directory, called "Temp" in the root folder of the project. Then go to that directory and
execute the following (you might need to use backslashes in Windows, depending on your shell):
    cmake ../Source
Then, in Linux, you just need to run make and you will have the executable ready to run. In Windows,
a Visual Studio project will be created, which you can open with Visual Studio 2010, compile and execute. If 
the linker reports that it cannot find a library from Boost or GLEW, you need to right click on the project, 
select Properties, and go to Configuration Properties > Linker > Input and edit the Additional Dependencies.
Locate the library that cannot be found and, if it does not start by "lib", add that prefix to it.
In Windows you will probably need to copy the dlls of the libraries we are using (SDL, Boost, GLEW etc) to the
output directory (Release or Debug), unless they are already accessible in your system (e.g.
if they have been installed to the System directory or if their directories have been included in the PATH
environment variable.)
To create an Eclipse project in Linux, run the following command from the Temp directory, mentioned above:
cmake -G "Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8 ../Source/
You will have to set the working directory from Build Configurations to where Temp and Temp/UnitTesting for the program
and the unit tests respectively. Otherwise some files (like model files) will not be found during execution.
* Simple compilation of sample OpenGL program (Ubuntu):

gcc -lglut -lGL -lGLEW -lGLU main.cpp -o OpenGLExample
(I have just put this here to always remember what compiling looked like before
cmake :) )

* Compiling the documentation (both systems)
Go to the Source/Game directory
Execute:
  doxygen doxygen.cfg
The documentation will be created and placed in the Docs/SourceCodeDoc/html directory

